name: Dependabot Auto-Approve and Merge

on:
  schedule:
    - cron: '*/30 * * * *'  # Stündlich ausführen
    #- cron: '0 21 * * 3'

jobs:
  auto-approve-merge:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Repository auschecken
        uses: actions/checkout@v4

      - name: Bei GitHub anmelden
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Dependabot PRs finden und verarbeiten
        run: |
          echo "Suche nach Dependabot PRs..."
          
          # Liste aller offenen PRs von Dependabot mit Titel und Nummer
          dependabot_prs=$(gh pr list --author "dependabot[bot]" --json number,title,body --jq '.')
          
          if [ -z "$dependabot_prs" ]; then
            echo "Keine offenen Dependabot PRs gefunden."
            exit 0
          fi
          
          echo "Dependabot PRs gefunden. Verarbeite..."
          
          # Für jeden PR prüfen, ob es sich um Minor oder Patch handelt
          echo "$dependabot_prs" | jq -c '.[]' | while read -r pr; do
            pr_number=$(echo "$pr" | jq -r '.number')
            pr_title=$(echo "$pr" | jq -r '.title')
            pr_body=$(echo "$pr" | jq -r '.body')
            
            echo "Prüfe PR #$pr_number: $pr_title"
            
            # Prüfen, ob es sich um ein Major-Update handelt
            if [[ "$pr_title" =~ major ]] || [[ "$pr_title" =~ "bump ".+" from "([0-9]+)".+ to "([1-9][0-9]+) ]] && [[ "${BASH_REMATCH[2]}" > "${BASH_REMATCH[1]}" ]]; then
              echo "PR #$pr_number ist ein Major-Update. Wird übersprungen."
              continue
            fi
            
            # Prüfe Dependabot-Metadaten für genauere Versionsinformationen
            if [[ "$pr_body" =~ "BREAKING CHANGE" ]] || [[ "$pr_body" =~ "Major version change" ]]; then
              echo "PR #$pr_number enthält Breaking Changes. Wird übersprungen."
              continue
            fi
            
            echo "PR #$pr_number ist ein Minor- oder Patch-Update. Wird verarbeitet."
            
            # PR genehmigen
            echo "Genehmige PR #$pr_number..."
            gh pr review $pr_number --approve -b "Automatisch genehmigt durch Workflow (Minor/Patch Update)."
            
            # Mehrere Versuche, um auf den aktualisierten Status zu warten
            max_retries=5
            counter=0
            mergeable="UNKNOWN"
            
            while [ "$mergeable" == "UNKNOWN" ] && [ $counter -lt $max_retries ]; do
              sleep 10
              echo "Warte auf PR-Status (Versuch $((counter+1))/$max_retries)..."
              
              # PR-Status erneut abrufen
              pr_info=$(gh pr view $pr_number --json state,mergeable,mergeStateStatus,reviewDecision)
              mergeable=$(echo "$pr_info" | jq -r '.mergeable')
              
              counter=$((counter+1))
            done
            
            echo "PR Info: $pr_info"
            
            # Werte extrahieren
            state=$(echo "$pr_info" | jq -r '.state')
            review_decision=$(echo "$pr_info" | jq -r '.reviewDecision // "NONE"')
            merge_state_status=$(echo "$pr_info" | jq -r '.mergeStateStatus')
            
            echo "Status: $state, Mergeable: $mergeable, Review: $review_decision, MergeState: $merge_state_status"
            
            # PR mergen oder Konflikt beheben
            if [ "$state" == "OPEN" ]; then
              if [ "$mergeable" == "CONFLICTING" ] || [ "$merge_state_status" == "DIRTY" ] || [ "$merge_state_status" == "BLOCKED" ]; then
                echo "PR #$pr_number hat Konflikte. Fordere Rebase an..."
                gh pr comment $pr_number --body "@dependabot rebase"
                
                # Warten auf Rebase-Fertigstellung
                echo "Warte auf Abschluss des Rebase (bis zu 5 Minuten)..."
                rebase_success=false
                max_rebase_wait=10  # 10 x 30s = 5 Minuten
                rebase_counter=0
                
                while [ "$rebase_success" == "false" ] && [ $rebase_counter -lt $max_rebase_wait ]; do
                  sleep 30
                  # Prüfen, ob der Rebase-Kommentar eine Antwort bekommen hat
                  comments=$(gh pr view $pr_number --json comments --jq '.comments')
                  latest_bot_comment=$(echo "$comments" | jq -r '.[] | select(.author.login == "dependabot[bot]") | .body' | tail -n 1)
                  
                  echo "Prüfe Rebase-Status (Versuch $((rebase_counter+1))/$max_rebase_wait)..."
                  echo "Letzter Bot-Kommentar: $latest_bot_comment"
                  
                  if [[ "$latest_bot_comment" == *"rebase completed successfully"* ]]; then
                    rebase_success=true
                    echo "Rebase erfolgreich abgeschlossen!"
                    
                    # PR-Status nach Rebase prüfen
                    pr_info=$(gh pr view $pr_number --json state,mergeable,mergeStateStatus,reviewDecision)
                    mergeable=$(echo "$pr_info" | jq -r '.mergeable')
                    
                    if [ "$mergeable" == "true" ] || [ "$mergeable" == "MERGEABLE" ]; then
                      echo "PR ist nach Rebase mergebar. Starte Merge..."
                      gh pr merge $pr_number --auto --squash
                    else
                      echo "PR ist nach Rebase noch nicht mergebar."
                    fi
                  elif [[ "$latest_bot_comment" == *"rebase failed"* ]]; then
                    echo "Rebase ist fehlgeschlagen."
                    break
                  fi
                  
                  rebase_counter=$((rebase_counter+1))
                done
                
                if [ "$rebase_success" == "false" ]; then
                  echo "Rebase war nicht erfolgreich innerhalb des Zeitlimits."
                fi
              else
                echo "Merge PR #$pr_number..."
                gh pr merge $pr_number --auto --squash
              fi
            else
              echo "PR #$pr_number ist nicht offen. Überspringe."
            fi
          done
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}